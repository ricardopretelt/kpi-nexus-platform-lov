services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${DB_NAME:-kpi_nexus_prod_v2}
      POSTGRES_USER: ${DB_USER:-kpi_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-new_secure_password_2024_xyz}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - kpi-network

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend
    ports:
      - "${PORT:-3001}:3001"
    environment:
      - DB_HOST=postgres
      - DB_USER=${DB_USER:-kpi_user}
      - DB_PASSWORD=${DB_PASSWORD:-new_secure_password_2024_xyz}
      - DB_NAME=${DB_NAME:-kpi_nexus_prod_v2}
      - DB_PORT=5432
      - JWT_SECRET=${JWT_SECRET}
      - NODE_ENV=${NODE_ENV:-development}
      - UPLOAD_PATH=${UPLOAD_PATH:-./uploads}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-5242880}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:8080,http://localhost:3000,http://localhost:5173,http://frontend:8080}
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      - postgres
    networks:
      - kpi-network

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "${FRONTEND_PORT:-8080}:8080"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV:-development}
    depends_on:
      - backend
    networks:
      - kpi-network

volumes:
  postgres_data:
  uploads:

networks:
  kpi-network:
    driver: bridge